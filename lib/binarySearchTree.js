// Generated by CoffeeScript 1.9.1
var BinarySearchTree;

BinarySearchTree = (function() {
  function BinarySearchTree() {
    this.root = null;
    this.size = 0;
    this.depth = 0;
    this.balance = 0;
  }

  BinarySearchTree.prototype.insert = function(value) {
    var current_depth, current_node;
    if (this.root != null) {
      current_depth = 1;
      current_node = this.root;
      while (current_node.value !== value) {
        if (value < current_node.value) {
          if (current_node.left == null) {
            current_node.left = {
              value: value
            };
            this.balance--;
          }
          current_node = current_node.left;
          current_depth++;
        } else {
          if (current_node.right == null) {
            current_node.right = {
              value: value
            };
            this.balance++;
          }
          current_node = current_node.right;
          current_depth++;
        }
      }
      if (current_depth > this.depth) {
        this.depth = current_depth;
      }
    } else {
      this.root = {
        value: value
      };
      this.depth = 1;
    }
    return this.size++;
  };

  BinarySearchTree.prototype.contains = function(value) {
    var current_node;
    current_node = this.root;
    while (true) {
      if (!current_node) {
        return false;
      } else if (value < current_node.value) {
        current_node = current_node.left;
      } else if (value > current_node.value) {
        current_node = current_node.right;
      } else if (value === current_node.value) {
        return true;
      }
    }
  };

  BinarySearchTree.prototype.size = function() {
    return this.size;
  };

  BinarySearchTree.prototype.depth = function() {
    return this.depth;
  };

  BinarySearchTree.prototype.balance = function() {
    return this.balance;
  };

  return BinarySearchTree;

})();

module.exports = {
  BinarySearchTree: BinarySearchTree
};
